"""Fix migration tracking

Revision ID: 6965a045310e
Revises: 26a7f547b871
Create Date: 2025-03-06 20:56:51.925544

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '6965a045310e'
down_revision = '26a7f547b871'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('note')
    op.drop_table('govregulator')
    op.drop_table('users')
    op.drop_table('leaseagr')
    op.drop_table('regcompliance')
    op.drop_table('mncenforcement')
    op.drop_table('store')
    op.drop_table('permit')
    with op.batch_alter_table('document', schema=None) as batch_op:
        batch_op.alter_column('submitted_status',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=20),
               existing_nullable=True,
               existing_server_default=sa.text("'submitted'::character varying"))
        batch_op.alter_column('reviewed_status',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=20),
               existing_nullable=True,
               existing_server_default=sa.text("'pending'::character varying"))
        batch_op.alter_column('approved_status',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=20),
               existing_nullable=True,
               existing_server_default=sa.text("'pending'::character varying"))
        batch_op.drop_constraint('fk_user', type_='foreignkey')
        batch_op.create_foreign_key(None, 'user_profile', ['user_id'], ['id'])

    with op.batch_alter_table('food_items', schema=None) as batch_op:
        batch_op.alter_column('selected_items',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)

    with op.batch_alter_table('health_compliance', schema=None) as batch_op:
        batch_op.alter_column('sanitary_facilities',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
        batch_op.alter_column('cleaning_facilities',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
        batch_op.alter_column('handwashing_stations',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
        batch_op.alter_column('waste_disposal',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
        batch_op.alter_column('food_handling',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
        batch_op.alter_column('food_storage',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
        batch_op.alter_column('food_preparation',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
        batch_op.alter_column('food_prep_tools',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
        batch_op.alter_column('employees',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)

    with op.batch_alter_table('lesee', schema=None) as batch_op:
        batch_op.create_unique_constraint(None, ['leseeemail'])
        batch_op.create_foreign_key(None, 'store_details', ['leseestoreid'], ['id'])

    with op.batch_alter_table('mncdepartments', schema=None) as batch_op:
        batch_op.create_unique_constraint(None, ['deptid'])

    with op.batch_alter_table('mncusers', schema=None) as batch_op:
        batch_op.drop_constraint('unique_mncusers_combination', type_='unique')
        batch_op.create_unique_constraint(None, ['mncemail'])
        batch_op.create_foreign_key(None, 'municipal', ['municipalid'], ['id'])
        batch_op.create_foreign_key(None, 'mncdepartments', ['deptid'], ['deptid'])

    with op.batch_alter_table('municipal', schema=None) as batch_op:
        batch_op.add_column(sa.Column('mncdept', sa.String(length=45), nullable=False))
        batch_op.create_unique_constraint(None, ['mncid'])

    with op.batch_alter_table('registration_form', schema=None) as batch_op:
        batch_op.alter_column('dob',
               existing_type=sa.DATE(),
               type_=sa.DateTime(),
               existing_nullable=False)
        batch_op.alter_column('gender',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=10),
               existing_nullable=False)
        batch_op.alter_column('address2',
               existing_type=sa.VARCHAR(length=100),
               nullable=True)

    with op.batch_alter_table('spazaowner', schema=None) as batch_op:
        batch_op.alter_column('name',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=45),
               existing_nullable=False)
        batch_op.alter_column('surname',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=45),
               existing_nullable=False)
        batch_op.alter_column('email',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=45),
               existing_nullable=False)
        batch_op.alter_column('address',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=45),
               existing_nullable=False)
        batch_op.alter_column('said',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.String(length=13),
               existing_nullable=False)
        batch_op.alter_column('user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.create_unique_constraint(None, ['email'])

    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.add_column(sa.Column('email', sa.String(length=150), nullable=True))
        batch_op.add_column(sa.Column('password', sa.String(length=150), nullable=True))
        batch_op.add_column(sa.Column('first_name', sa.String(length=150), nullable=True))
        batch_op.create_unique_constraint(None, ['email'])
        batch_op.drop_constraint('user_user_id_fkey', type_='foreignkey')
        batch_op.drop_column('date')
        batch_op.drop_column('data')
        batch_op.drop_column('user_id')

    with op.batch_alter_table('user_profile', schema=None) as batch_op:
        batch_op.alter_column('user_type',
               existing_type=sa.VARCHAR(length=50),
               nullable=False)
        batch_op.create_unique_constraint(None, ['username'])

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user_profile', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='unique')
        batch_op.alter_column('user_type',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)

    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.add_column(sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('data', sa.VARCHAR(length=10000), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
        batch_op.create_foreign_key('user_user_id_fkey', 'user', ['user_id'], ['id'])
        batch_op.drop_constraint(None, type_='unique')
        batch_op.drop_column('first_name')
        batch_op.drop_column('password')
        batch_op.drop_column('email')

    with op.batch_alter_table('spazaowner', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='unique')
        batch_op.alter_column('user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.alter_column('said',
               existing_type=sa.String(length=13),
               type_=sa.VARCHAR(length=20),
               existing_nullable=False)
        batch_op.alter_column('address',
               existing_type=sa.String(length=45),
               type_=sa.VARCHAR(length=100),
               existing_nullable=False)
        batch_op.alter_column('email',
               existing_type=sa.String(length=45),
               type_=sa.VARCHAR(length=100),
               existing_nullable=False)
        batch_op.alter_column('surname',
               existing_type=sa.String(length=45),
               type_=sa.VARCHAR(length=100),
               existing_nullable=False)
        batch_op.alter_column('name',
               existing_type=sa.String(length=45),
               type_=sa.VARCHAR(length=100),
               existing_nullable=False)

    with op.batch_alter_table('registration_form', schema=None) as batch_op:
        batch_op.alter_column('address2',
               existing_type=sa.VARCHAR(length=100),
               nullable=False)
        batch_op.alter_column('gender',
               existing_type=sa.String(length=10),
               type_=sa.VARCHAR(length=100),
               existing_nullable=False)
        batch_op.alter_column('dob',
               existing_type=sa.DateTime(),
               type_=sa.DATE(),
               existing_nullable=False)

    with op.batch_alter_table('municipal', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='unique')
        batch_op.drop_column('mncdept')

    with op.batch_alter_table('mncusers', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='unique')
        batch_op.create_unique_constraint('unique_mncusers_combination', ['mnc_user_id', 'deptid', 'municipalid'])

    with op.batch_alter_table('mncdepartments', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='unique')

    with op.batch_alter_table('lesee', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='unique')

    with op.batch_alter_table('health_compliance', schema=None) as batch_op:
        batch_op.alter_column('employees',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
        batch_op.alter_column('food_prep_tools',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
        batch_op.alter_column('food_preparation',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
        batch_op.alter_column('food_storage',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
        batch_op.alter_column('food_handling',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
        batch_op.alter_column('waste_disposal',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
        batch_op.alter_column('handwashing_stations',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
        batch_op.alter_column('cleaning_facilities',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
        batch_op.alter_column('sanitary_facilities',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)

    with op.batch_alter_table('food_items', schema=None) as batch_op:
        batch_op.alter_column('selected_items',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)

    with op.batch_alter_table('document', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('fk_user', 'user_profile', ['user_id'], ['id'], ondelete='CASCADE')
        batch_op.alter_column('approved_status',
               existing_type=sa.String(length=20),
               type_=sa.VARCHAR(length=50),
               existing_nullable=True,
               existing_server_default=sa.text("'pending'::character varying"))
        batch_op.alter_column('reviewed_status',
               existing_type=sa.String(length=20),
               type_=sa.VARCHAR(length=50),
               existing_nullable=True,
               existing_server_default=sa.text("'pending'::character varying"))
        batch_op.alter_column('submitted_status',
               existing_type=sa.String(length=20),
               type_=sa.VARCHAR(length=50),
               existing_nullable=True,
               existing_server_default=sa.text("'submitted'::character varying"))

    op.create_table('permit',
    sa.Column('permitid', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('storename', sa.VARCHAR(length=45), autoincrement=False, nullable=False),
    sa.Column('permittype', sa.VARCHAR(length=45), autoincrement=False, nullable=False),
    sa.Column('issuedate', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('expirydate', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('permitstatus', sa.VARCHAR(length=45), autoincrement=False, nullable=False),
    sa.Column('storeclass', sa.VARCHAR(length=45), autoincrement=False, nullable=False),
    sa.Column('mncid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('storeid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('permitnumber', sa.VARCHAR(length=45), autoincrement=False, nullable=False),
    sa.Column('createdat', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updatedat', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['storeid'], ['store.storeid'], name='fk_permit_store'),
    sa.PrimaryKeyConstraint('permitid', 'mncid', 'storeid', name='permit_pkey')
    )
    op.create_table('store',
    sa.Column('storeid', sa.INTEGER(), server_default=sa.text("nextval('store_storeid_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('permitid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('cipcno', sa.VARCHAR(length=45), autoincrement=False, nullable=False),
    sa.Column('sarsno', sa.VARCHAR(length=45), autoincrement=False, nullable=False),
    sa.Column('storetype', sa.VARCHAR(length=45), autoincrement=False, nullable=False),
    sa.Column('compstatus', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('ownershipstatus', sa.VARCHAR(length=45), autoincrement=False, nullable=False),
    sa.Column('storeaddress', sa.VARCHAR(length=45), autoincrement=False, nullable=False),
    sa.Column('storevol', sa.VARCHAR(length=45), autoincrement=False, nullable=False),
    sa.Column('storename', sa.VARCHAR(length=45), autoincrement=False, nullable=False),
    sa.Column('spazaownerid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('regcomplianceid', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('permit_municipal_ownerid', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('spazaowner_ownerid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['spazaownerid'], ['spazaowner.id'], name='fk_store_spazaowner'),
    sa.PrimaryKeyConstraint('storeid', name='store_pkey'),
    sa.UniqueConstraint('storeid', 'permitid', 'permit_municipal_ownerid', 'spazaowner_ownerid', name='unique_store_combination'),
    postgresql_ignore_search_path=False
    )
    op.create_table('mncenforcement',
    sa.Column('enforcementid', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('bylawacttype', sa.VARCHAR(length=45), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(length=45), autoincrement=False, nullable=False),
    sa.Column('outcome', sa.VARCHAR(length=45), autoincrement=False, nullable=False),
    sa.Column('compliancedate', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('notes', sa.VARCHAR(length=45), autoincrement=False, nullable=False),
    sa.Column('datecreated', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedate', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('penaltyamt', sa.NUMERIC(), autoincrement=False, nullable=False),
    sa.Column('mncusers_mncuserid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('mncusers_deptid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('mncusers_municipalid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('mncbylaws_bylawid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('mncbylaws_municipalid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('store_storeid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('store_permitid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('store_permit_municipal_ownerid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('store_spazaowner_ownerid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['mncusers_mncuserid', 'mncusers_deptid', 'mncusers_municipalid'], ['mncusers.mnc_user_id', 'mncusers.deptid', 'mncusers.municipalid'], name='fk_mncenforcement_mncusers'),
    sa.ForeignKeyConstraint(['store_storeid', 'store_permitid', 'store_permit_municipal_ownerid', 'store_spazaowner_ownerid'], ['store.storeid', 'store.permitid', 'store.permit_municipal_ownerid', 'store.spazaowner_ownerid'], name='fk_mncenforcement_store'),
    sa.PrimaryKeyConstraint('enforcementid', 'mncusers_mncuserid', 'mncusers_deptid', 'mncusers_municipalid', 'mncbylaws_bylawid', 'mncbylaws_municipalid', 'store_storeid', 'store_permitid', 'store_permit_municipal_ownerid', 'store_spazaowner_ownerid', name='mncenforcement_pkey')
    )
    op.create_table('regcompliance',
    sa.Column('regcomplianceid', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('complianceacttype', sa.VARCHAR(length=45), sa.Computed("('Prefix-'::text || 'Suffix'::text)", persisted=True), autoincrement=False, nullable=True),
    sa.Column('compliancestatus', sa.VARCHAR(length=45), autoincrement=False, nullable=False),
    sa.Column('compliancedate', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('notes', sa.VARCHAR(length=45), autoincrement=False, nullable=False),
    sa.Column('datecreated', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedate', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('govregulator_regulatorid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['govregulator_regulatorid'], ['govregulator.regulatorid'], name='fk_regcompliance_govregulator'),
    sa.PrimaryKeyConstraint('regcomplianceid', 'govregulator_regulatorid', name='regcompliance_pkey')
    )
    op.create_table('leaseagr',
    sa.Column('leaseid', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('leaseowner', sa.VARCHAR(length=45), autoincrement=False, nullable=False),
    sa.Column('leseename', sa.VARCHAR(length=45), autoincrement=False, nullable=False),
    sa.Column('agreementterm', sa.VARCHAR(length=45), autoincrement=False, nullable=False),
    sa.Column('leasestartdate', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('leaseenddate', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('leseeid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['leseeid'], ['lesee.id'], name='fk_leaseagr_lesee'),
    sa.PrimaryKeyConstraint('leaseid', name='leaseagr_pkey')
    )
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('username', sa.VARCHAR(length=80), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=120), autoincrement=False, nullable=False),
    sa.Column('cellno', sa.VARCHAR(length=120), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('cellno', name='users_cellno_key'),
    sa.UniqueConstraint('email', name='users_email_key'),
    sa.UniqueConstraint('username', name='users_username_key')
    )
    op.create_table('govregulator',
    sa.Column('regulatorid', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('category', sa.VARCHAR(length=45), autoincrement=False, nullable=False, comment='Tax, CIPC, Immigration, SAPS'),
    sa.Column('registrationno', sa.VARCHAR(length=45), autoincrement=False, nullable=False, comment='Tax number, CIPC number'),
    sa.Column('status', sa.VARCHAR(length=45), autoincrement=False, nullable=False, comment='Valid, Expired'),
    sa.Column('issuedate', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('expirydate', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('datecreated', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updatedate', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('regulatorid', name='govregulator_pkey')
    )
    op.create_table('note',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('data', sa.VARCHAR(length=10000), autoincrement=False, nullable=True),
    sa.Column('date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='note_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='note_pkey')
    )
    # ### end Alembic commands ###
